{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/dom-loader.js","webpack:///./src/game.js","webpack:///./src/index.js","webpack:///./src/round.js"],"names":["easy_span","document","getElementById","medium_span","hard_span","impossible_span","plus_span","minus_span","round_div","reset_div","points_div","howtoplay_div","gameover_span","playbutton","sounds_div","scorelist_ul","name_input","Game","heartSpots","level","speed","numRounds","roundNum","generateHeartSpots","setTimeout","nextRound","i","push","Math","floor","random","round","Round","addEventListener","event","code","game","play"],"mappings":"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B,OAA1B,EAAmC,UAAAC,KAAK,EAAI;AACxC,MAAIA,KAAK,CAACC,IAAN,KAAe,OAAnB,EAA4B;AACxB,QAAIC,IAAI,GAAG,IAAInB,gDAAJ,EAAX;AACAmB,QAAI,CAACC,IAAL;AACH;AACJ,CALD,E,CASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA,I;;;;;;;;;;;;;;;;IC/SqBL,K,GACjB,iBAAc;AAAA;AAEb,C,EAGL;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","export const easy_span = document.getElementById('easy');\nexport const medium_span = document.getElementById('medium');\nexport const hard_span = document.getElementById('hard');\nexport const impossible_span = document.getElementById('impossible');\nexport const plus_span = document.getElementById('plus');\nexport const minus_span = document.getElementById('minus');\nexport const round_div = document.getElementById('round');\nexport const reset_div = document.getElementById('reset');\nexport const points_div = document.getElementById('points');\nexport const howtoplay_div = document.getElementById(\"howtoplay\");\nexport const gameover_span = document.getElementById(\"gameover\");\nexport const playbutton = document.getElementById(\"playbutton\");\nexport const sounds_div = document.getElementById(\"sounds\");\nexport const scorelist_ul = document.getElementById(\"scorelist\");\nexport const name_input = document.getElementById(\"name\");","import * as dom from \"./dom-loader.js\"\nimport Round from \"./round.js\";\n\nexport default class Game {\n    constructor() {\n        this.heartSpots = [];\n        this.level = \"medium\";\n        this.speed = 900;\n        this.numRounds = 10;\n        this.roundNum = 0;\n\n\n    }\n\n    play() {  \n        // if (sound) startgame_sound.play();\n        // arrowKeys = false;\n        // roundNum = 0;\n        this.generateHeartSpots();\n        setTimeout(() => this.nextRound(), 1500);\n    }\n\n    generateHeartSpots() {\n        for (let i = 0; i < this.numRounds; i++) {\n            this.heartSpots.push(Math.floor(Math.random() * 4));\n        }\n    }\n\n    nextRound() {\n        roundNum += 1;\n        round = new Round(this.heartSpots);\n    }\n        // dom.round_div.style.display = \"block\";\n        // dom.round_div.innerText = \"Round \" + roundNum;\n        // dom.reset_div.style.display = \"block\";\n        // dom.plus_span.style.display = \"none\";\n        // dom.minus_span.style.display = \"none\";\n\n        // dom.reset_div.addEventListener(\"click\", () => { \n        //     reset = true; dom.reset_div.style.color = \"red\"; \n        //     if (sound) dom.reset_sound.play();});\n\n        //     if (reset === true) {\n        //         startOver();\n        //         return;\n        //     }\n\n        //     if (roundNum > numRounds) {\n        //         gameOver();\n        //         arrowKeys = false;\n        //         return;\n        //     }\n\n    //         round = new Round(\n    //             ctx,\n    //             heartSpots, \n    //             shapeSize, \n    //             topSpot, \n    //             rightSpot, \n    //             bottomSpot, \n    //             leftSpot, \n    //             drawHeart,\n    //             drawSpade,\n    //             drawClub,\n    //             drawDiamond,\n    //             roundNum,\n    //             speed\n    //             );\n\n\n    //             round.flashHeart();\n    //             round.flashShapes();\n    //             arrowKeys = true;\n\n    //         document.addEventListener(\"keydown\", event => {\n    //             switch (event.keyCode) {\n    //                 case 37:\n    //                     if (arrowKeys) {\n    //                         check(round, 3); }\n    //                     arrowKeys = false;\n    //                     break;\n    //                 case 38:\n    //                     if (arrowKeys) {\n    //                         check(round, 0);\n    //                     }\n    //                     arrowKeys = false;\n    //                     break;\n    //                 case 39:\n    //                     if (arrowKeys) {\n    //                         check(round, 1);\n    //                     }\n    //                     arrowKeys = false;\n    //                     break;\n    //                 case 40:\n    //                     if (arrowKeys) {\n    //                         check(round, 2);\n    //                     }\n    //                     arrowKeys = false;\n    //                     break;\n    //             }\n    //     });\n\n    //     setTimeout(() => round.clearSpots(), speed);\n    //     setTimeout(() => toggleOff(), speed);\n    //     setTimeout(nextRound, speed + 1500);  \n    // }\n    \n}","// import Round from \"./round\";\n// // import InputHandler from \"./input\";\n// import * as dom from \"./dom-loader.js\"\nimport Game from \"./game.js\";\n\n\n\n// let roundNum;\n// let heartSpots = [];\n// let numRounds = 10;\n// let round;\n// let arrowKeys = false;\n// // let speed = 900;\n// // let level = \"medium\";\n// let point;\n// let gameInSession = false;\n// let reset = false;\n// let startgame_sound = new Audio('assets/sounds/startgame.mp3');\n// let correct_sound = new Audio('assets/sounds/correct.wav');\n// let wrong_sound = new Audio('assets/sounds/wrong2.wav');\n// let gameover_sound = new Audio('assets/sounds/gameover.wav');\n// let reset_sound = new Audio('assets/sounds/reset.wav');\n// let music = new Audio('assets/sounds/BEPmidi.mp3');\n// let select_sound = new Audio('assets/sounds/select.wav');\n// let submit_sound = new Audio('assets/sounds/submit.wav');\n// music.currentTime = 2;\n// music.volume = 0.6;\n// music.loop = true; \n// let sound = true;\n// let name = \"Player\";\n// let scoreNum = 0;\n\n// const topSpot = {\n//     x: 159,\n//     y: 16\n// }\n\n// const rightSpot = {\n//     x: 251,\n//     y: 57\n// }\n\n// const bottomSpot = {\n//     x: 159,\n//     y: 99\n// }\n\n\n// const leftSpot = {\n//     x: 67,\n//     y: 57\n// }\n\n// const shapeSize = {\n//     w: 10,\n//     h: 15\n// }\n\n\n// dom.easy_span.addEventListener(\"click\", () => changeLevel(\"easy\"));\n// dom.medium_span.addEventListener(\"click\", () => changeLevel(\"medium\"));\n// dom.hard_span.addEventListener(\"click\", () => changeLevel(\"hard\"));\n// dom.impossible_span.addEventListener(\"click\", () => changeLevel(\"impossible\"));\n\n\n// function changeLevel(lev) {\n//     if (gameInSession === false) {\n//         if (sound) select_sound.play();\n//         switch (lev) {\n//             case \"easy\":\n//                 speed = 2000;\n//                 level = \"easy\";\n//                 resetLevelColors();\n//                 dom.easy_span.style.color = \"tomato\";\n//                 break;\n//             case \"medium\":\n//                 speed = 1000;\n//                 level = \"medium\";\n//                 resetLevelColors();\n//                 dom.medium_span.style.color = \"tomato\";\n//                 break;\n//             case \"hard\":\n//                 speed = 700;\n//                 level = \"hard\";\n//                 resetLevelColors();\n//                 dom.hard_span.style.color = \"tomato\";\n//                 break;\n//             case \"impossible\":\n//                 resetLevelColors();\n//                 dom.impossible_span.style.color = \"tomato\";\n//                 speed = 400;\n//                 level = \"impossible\";\n//                 break;\n//         }\n//     }\n// }\n\n// function resetLevelColors() {\n//     dom.easy_span.style.color = \"black\";\n//     dom.medium_span.style.color = \"black\";\n//     dom.hard_span.style.color = \"black\";\n//     dom.impossible_span.style.color = \"black\";\n// }\n\n// document.addEventListener(\"keyup\", event => {\n//     if (event.code === \"Space\") {\n//         if (gameInSession === false) {\n//             play();\n//             point = 0;\n//             dom.points_div.innerText = point;\n//             gameInSession = true;\n//             dom.howtoplay_div.style.display = \"none\";\n//         }\n\n//         dom.gameover_span.style.display = \"none\";\n//     }\n// })\n\ndocument.addEventListener(\"keyup\", event => {\n    if (event.code === \"Space\") {\n        let game = new Game;\n        game.play();\n    }\n})\n\n\n\n// // function play() {\n// //     if (sound) startgame_sound.play();\n// //     arrowKeys = false;\n// //     roundNum = 0;\n// //     heartSpots = [];\n// //     for (let i = 0; i < numRounds; i++) {\n// //         heartSpots.push(Math.floor(Math.random() * 4));\n// //     }\n// //     setTimeout(() => nextRound(), 1500);\n// // }\n\n// export function nextRound() {\n//     roundNum += 1;\n//     dom.round_div.style.display = \"block\";\n//     dom.round_div.innerText = \"Round \" + roundNum;\n//     dom.reset_div.style.display = \"block\";\n//     dom.plus_span.style.display = \"none\";\n//     dom.minus_span.style.display = \"none\";\n    \n//     dom.reset_div.addEventListener(\"click\", () => { reset = true; dom.reset_div.style.color = \"red\"; if (sound) dom.reset_sound.play();});\n\n//     if (reset === true) {\n//         startOver();\n//         return;\n//     }\n\n//     if (roundNum > numRounds) {\n//         gameOver();\n//         arrowKeys = false;\n//         return;\n//     }\n\n//     round = new Round(\n//         ctx,\n//         heartSpots, \n//         shapeSize, \n//         topSpot, \n//         rightSpot, \n//         bottomSpot, \n//         leftSpot, \n//         drawHeart,\n//         drawSpade,\n//         drawClub,\n//         drawDiamond,\n//         roundNum,\n//         speed\n//         );\n\n  \n//         round.flashHeart();\n//         round.flashShapes();\n//         arrowKeys = true;\n\n//     document.addEventListener(\"keydown\", event => {\n//         switch (event.keyCode) {\n//             case 37:\n//                 if (arrowKeys) {\n//                     check(round, 3); }\n//                 arrowKeys = false;\n//                 break;\n//             case 38:\n//                 if (arrowKeys) {\n//                     check(round, 0);\n//                 }\n//                 arrowKeys = false;\n//                 break;\n//             case 39:\n//                 if (arrowKeys) {\n//                     check(round, 1);\n//                 }\n//                 arrowKeys = false;\n//                 break;\n//             case 40:\n//                 if (arrowKeys) {\n//                     check(round, 2);\n//                 }\n//                 arrowKeys = false;\n//                 break;\n//         }\n//     });\n//     setTimeout(() => round.clearSpots(), speed);\n//     setTimeout(() => toggleOff(), speed);\n//     setTimeout(nextRound, speed + 1500);  \n// }\n\n// function startOver() {\n//     reset = false;\n//     round = 0;\n//     point = 0;\n//     dom.points_div.innerText = point;\n//     dom.round_div.style.display = \"none\";\n//     dom.reset_div.style.display = \"none\";\n//     gameInSession = false;\n//     dom.howtoplay_div.style.display = \"block\";\n//     dom.reset_div.style.color = \"rgb(246, 171, 73)\";\n// }\n\n// function toggleOff() {\n//     arrowKeys = false;\n// }\n\n// export function check(round, userChoice) {\n//     if (userChoice === round.heartSpots[round.roundNum - 1]) {\n//         dom.plus_span.style.display = \"block\";\n//         dom.plus_span.classList.add(\"popup\");\n//         point += 5;\n//         dom.points_div.innerText = point;\n//         round.clearSpots();\n//         if (sound) correct_sound.play();\n        \n//     } else {\n//         dom.minus_span.style.display = \"block\";\n//         dom.minus_span.classList.add(\"popup\");\n//         point -= 5;\n//         dom.points_div.innerText = point;\n//         round.clearSpots();\n//         if (sound) wrong_sound.play();\n//     }\n// }\n\n// function gameOver() {\n//     gameInSession = false;\n//     dom.gameover_span.style.display = \"block\";\n//     dom.round_div.style.display = \"none\"\n//     if (sound) gameover_sound.play();\n//     dom.reset_div.style.display = \"none\";\n//     addScore();\n\n\n    \n// }\n\n// function addScore() {\n//     scoreNum += 1;\n\n//     if (scoreNum === 9) {\n//         dom.scorelist_ul.removeChild(scorelist_ul.firstChild);\n//         scoreNum -= 1;\n//     }\n\n//     let div = document.createElement(\"div\");\n//     div.innerText = name + \"  |  \" + point + \"pts\" + \"  |  \" + level;\n//     dom.scorelist_ul.appendChild(div);\n// }\n\n// playbutton.addEventListener(\"click\", toggleMusic);\n\n// function toggleMusic() {\n//     if (playbutton.classList.value === \"play\") {\n//         playbutton.classList = \"pause\";\n//         music.play();\n//     } else {\n//         playbutton.classList = \"play\";\n//         music.pause();\n//     }\n// }\n\n// dom.sounds_div.addEventListener(\"click\", toggleSounds);\n\n// function toggleSounds() {\n//     if (dom.sounds_div.classList.value === \"sounds\") {\n//         dom.sounds_div.classList = \"mute\";\n//         sound = false;\n//     } else {\n//         dom.sounds_div.classList = \"sounds\";\n//         sound = true;\n//     }\n// }\n\n// dom.name_input.onchange = updateName;\n\n// function updateName() {\n//     if (sound) submit_sound.play();\n//     name = dom.name_input.value;\n//     dom.name_input.style.color = \"rgb(240, 102, 38)\";\n//     dom.name_input.blur();\n// }","export default class Round {\n    constructor() {\n        \n    }\n}\n\n// import InputHandler from \"./input\";\n\n// export default class Round {\n//     constructor(\n//         ctx,\n//         heartSpots,\n//         shapeSize,\n//         topSpot,\n//         rightSpot,\n//         bottomSpot,\n//         leftSpot,\n//         roundNum,\n//         speed\n//     ) {\n//         this.gameHeight = 1000;\n//         this.gameWidth = 1000;\n//         this.ctx = ctx;\n//         this.heartSpots = heartSpots;\n//         this.shapeSize = shapeSize;\n//         this.spots = [topSpot, rightSpot, bottomSpot, leftSpot];\n//         this.colors = [\n//             \"red\",\n//             \"lawngreen\",\n//             \"crimson\",\n//             \"gold\",\n//             \"orangered\"\n//         ];\n//         this.roundNum = roundNum;\n//         this.shuffle = this.shuffle.bind(this);\n//         this.choice = null;\n//         this.speed = speed;\n//     }\n        \n//         // flashHeart() {\n//         //     this.drawHeart(\n//         //         this.ctx,\n//         //         this.spots[this.heartSpots[this.roundNum-1]].x,\n//         //         this.spots[this.heartSpots[this.roundNum-1]].y,\n//         //         this.shapeSize.w,\n//         //         this.shapeSize.h,\n//         //         this.colors[Math.floor(Math.random() * this.colors.length)]\n//         //     );\n//         // }\n\n//         // flashShapes() {\n//         //     let noHeartSpots = this.spots.filter((spot, idx) => idx !== this.heartSpots[this.roundNum-1]);\n//         //     let shuffledSpots = this.shuffle(noHeartSpots);\n\n//         //     this.drawSpade(\n//         //         this.ctx,\n//         //         shuffledSpots[0].x,\n//         //         shuffledSpots[0].y,\n//         //         this.shapeSize.w,\n//         //         this.shapeSize.h,\n//         //         this.colors[Math.floor(Math.random() * this.colors.length)],\n//         //         );\n\n//         //     this.drawDiamond(\n//         //         this.ctx,\n//         //         shuffledSpots[1].x,\n//         //         shuffledSpots[1].y,\n//         //         this.shapeSize.w,\n//         //         this.shapeSize.h,\n//         //         this.colors[\n//         //         Math.floor(Math.random() * this.colors.length)\n//         //         ]\n//         //     ); \n\n//         //     this.drawClub(\n//         //         this.ctx,\n//         //         shuffledSpots[2].x,\n//         //         shuffledSpots[2].y,\n//         //         this.shapeSize.w,\n//         //         this.shapeSize.h,\n//         //         this.colors[\n//         //         Math.floor(Math.random() * this.colors.length)\n//         //         ]\n//         //     ); \n//         // }\n\n//         // shuffle(spots) {\n//         //     let newPos;\n//         //     let temp;\n//         //     for (let i = spots.length - 1; i > 0; i--) {\n//         //         newPos = Math.floor(Math.random() * (i + 1));\n//         //         temp = spots[i];\n//         //         spots[i] = spots[newPos];\n//         //         spots[newPos] = temp;\n//         //     }\n//         //     return spots;\n//         //  }\n\n//         //  clearSpots() {\n//         //     this.ctx.clearRect(0, 0, this.gameWidth, this.gameHeight);\n//         //  }\n\n// }"],"sourceRoot":""}